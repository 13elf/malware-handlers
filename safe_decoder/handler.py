import socket
import cmd
import threading
from termcolor import colored


class Decoding:
    def __init__(self,data):
        self.data = data
        self.decoded = ""

    def decode(self):
        if type(self.data) != bytes:
            print("The function decode works only with bytes")
            return

        string = ""
        for i in self.data:
            if i >= 128:
                x = i.to_bytes(1,"big")
                decoded = "\\" + str(x)[3:-1]
                string += colored(decoded, "red", attrs=["bold"])
            else:
                string += i.to_bytes(1, "big").decode()

        self.decoded = string
        return string


class Encoding:
    def __init__(self,string):
        self.string = string
        self.encoded = b""

    def encode(self):
        if type(self.string) != str:
            print("The function encode() works only with a string argument")

        string = self.string
        index = 0
        byte_arr = []

        while index < len(string):
            if string[index] != "\\":
                byte = string[index].encode()[0]
                byte_arr.append(byte)
                index += 1
            else:
                if string[index+1] == "\\":
                    byte = string[index+1].encode()[0]
                    byte_arr.append(byte)
                    index +=2
                elif string[index+1] == "x":
                    hex_value = string[index+2:index+4]
                    byte = int(hex_value,16)
                    byte_arr.append(byte)
                    index += 4

        self.encoded = bytes(byte_arr)
        return self.encoded


class GetInput(cmd.Cmd):
    prompt = ""
    
    def __init__(self):
        cmd.Cmd.__init__(self)
        global command

    def default(self, line):
        global command
        command = line
        return True


class InitializeHandler:
    def __init__(self, port):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(("0.0.0.0", port))
        self.socket.listen()
        print(colored("[*]","blue",attrs=["bold"]), "Started reverse TCP handler on port {}".format(str(port)))
        conn, addr = self.socket.accept()
        self.isAlive = True
        print(colored("[+]","green", attrs=["bold"]), "Session received from {0}:{1}".format(str(addr[0]),str(addr[1])))

        threading.Thread(target=self.read_tcp_stream, args=(conn,)).start()
        self.send_command(conn)

    def read_tcp_stream(self, conn):
        while True:
            data = conn.recv(4096)

            if len(data) == 0:
                self.isAlive = False
                return

            decoded = Decoding(data).decode()
            print(decoded, flush=True, end="")

    def send_command(self, conn):
        while True:
            global command
            GetInput().cmdloop()
            command += "\n"

            if self.isAlive == False:
                print(colored("[-]","red", attrs=["bold"]), "Session died")
                return
            
            encoded = Encoding(command).encode()
            conn.send(encoded)


if __name__ == "__main__":
    try:
        InitializeHandler(port=1234)
    except KeyboardInterrupt:
        exit()
